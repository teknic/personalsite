<?php

define('BT_CORE_BLOG_PER_PAGE', 9);
define('BT_CORE_TUTORIAL_PER_PAGE', 9);

/**
 * Hold all the core related customizations.
 */

/**
 *  Implements hook_menu().
 */
function bt_core_menu() {
  $items = array();

  $items['blog'] = array(
    'title' => 'Blog',
    'description' => 'List of blogs',
    'page callback' => 'bt_blog_list',
    'access arguments' => array('access content'),
    'file' => 'includes/bt_blog.inc',
    'type' => MENU_CALLBACK,
  );

  $items['open-source'] = array(
    'title' => 'Modules',
    'description' => 'List of modules',
    'page callback' => 'bt_module_list',
    'file' => 'includes/bt_module.inc',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['tutorials'] = array(
    'title' => 'Tutorials',
    'description' => 'List of tutorials',
    'page callback' => 'bt_tutorial_list',
    'file' => 'includes/bt_tutorial.inc',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['resume'] = array(
    'title' => 'Resume',
    'description' => 'Resume Page',
    'page callback' => 'bt_resume_page',
    'file' => 'includes/bt_resume.inc',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['contact'] = array(
    'title' => 'Contact',
    'description' => 'Contact Page',
    'page callback' => 'bt_contact_page',
    'file' => 'includes/bt_contact.inc',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 *  Implements hook_preprocess_HOOK().
 */
function bt_core_preprocess_page(&$variables) {
  // Add search box
  $page = search_api_page_load('search_api_page');
  $search = drupal_get_form('search_api_page_search_form_' . $page->machine_name, $page, NULL, TRUE);
  $search['keys_1']['#prefix'] = '<div class="input-group">';
  $search['keys_1']['#suffix'] = '<span class="input-group-btn"><button class="btn btn-default" type="submit"><i class="glyphicon glyphicon-search"></i></button></span></div>';
  $search['#attributes']['class'][] = 'top-search pull-right col-sm-3';
  $search['submit_1']['#attributes']['class'][] = 'element-invisible';
  $variables['search'] = drupal_render($search);

  // Add categories to footer
  $categories = bt_core_categories();
  $variables['categories'] = $categories;

  // Add recent posts
  $view = views_get_view('recent_posts');
  $view->set_display('block');
  $view->pre_execute();
  $view->execute();
  $variables['recent_posts'] = $view->render('block');

  // Add carousel
  if (drupal_is_front_page()) {
    bt_core_homepage_carousel($variables);
  }

  if (arg(0) == 'about' || (arg(0) == 'node' && arg(1) == 1)) {
    $variables['page_icon'] = '<i class="fa fa-barcode fa-8x"></i>';
    $variables['page_description'] = t("You have some splaining to do.");
  }

  if (arg(0) == 'blog') {
    if ($_GET['q'] == 'blog') {
      unset($variables['theme_hook_suggestions'][0]);
    }
    $variables['page_icon'] = '<i class="fa fa-database fa-8x"></i>';
    $variables['page_description'] = t('Helpful blogs about development and sometimes random rants');
  }

  if (arg(0) == 'open-source') {
    $variables['page_icon'] = '<i class="fa fa-tasks fa-8x"></i>';
    $variables['page_description'] = t('Open source modules for everyone!');
  }

  if (arg(0) == 'tutorials') {
    $variables['page_icon'] = '<i class="fa fa-file-code-o fa-8x"></i>';
    $variables['page_description'] = t("Some examples, how to's and step-by-step's");
  }

  if (arg(0) == 'contact') {
    $variables['page_icon'] = '<i class="fa fa-envelope fa-8x"></i>';
    $variables['page_description'] = t("Got a question? Feel free to contact me.");
  }

  if (isset($variables['node']) && ($variables['node']->type == 'blog' || $variables['node']->type == 'module' || $variables['node']->type =='tutorial')) {
    // If the node type is "blog_madness" the template suggestion will be "page--blog-madness.tpl.php".
    $variables['theme_hook_suggestions'][] = 'page__'. $variables['node']->type;
  }

  if (arg(0) == 'search') {
    drupal_add_js(drupal_get_path('module', 'bt_core') . '/js/bt_search.js');
    $variables['page_icon'] = '<i class="fa fa-search fa-8x"></i>';
    $variables['page_description'] = t("It's amazing what you find when you go looking.");
  }

  if (arg(0) == 'taxonomy' && arg(1) == 'term') {
    $variables['title'] = 'Content Tags';
    $term_name = $variables['page']['content']['system_main']['term_heading']['term']['#term']->name;
    $variables['page_icon'] = '<i class="fa fa-tags fa-8x"></i>';
    $variables['page_description'] = t("Content marked with the tag: ':term_name'", array(':term_name' => $term_name));
  }
}

/**
 * Homepage carousel.
 *
 * @param $variables
 */
function bt_core_homepage_carousel(&$variables) {
  drupal_add_css(drupal_get_path('theme', 'bt_theme') . '/slick/slick/slick.css');
  drupal_add_js(drupal_get_path('theme', 'bt_theme') . '/slick/slick/slick.min.js');
  drupal_add_js(drupal_get_path('module', 'bt_core') . '/js/bt_core.homepage.js');

  // Check cache, return if you got it.
  if ($cached = cache_get('homepage_carousel')) {
    $variables['homepage_carousel'] = $cached->data;
  }

  // Get first five blog / tutorial content types.
  $sql = <<<SQL
    SELECT
      n.nid,
      n.title,
      bi.field_blog_image_fid as blog_image,
      fm.uri as uri,
      fm.filename as filename
    FROM
      {node} n
    JOIN {field_data_field_blog_image} bi ON n.nid = bi.entity_id AND bi.bundle = 'blog'
    JOIN {file_managed} fm ON bi.field_blog_image_fid = fm.fid
    WHERE
      n.type IN ('blog')
      AND n.status = 1
    ORDER BY n.created DESC
SQL;

  $result = db_query_range($sql, 0, 5);
  $items = array();
  foreach ($result as $row) {
    $items[$row->nid] = $row;
    $items[$row->nid]->url = drupal_get_path_alias('node/' . $row->nid);
    $items[$row->nid]->image_style = image_style_url('blog_flexslider_image', $row->uri);
  }

  $output = theme('bt_homepage_carousel', array('items' => $items));
  cache_set('homepage_carousel', $output);
  $variables['homepage_carousel'] = $output;
}

/**
 *  Implements hook_preprocess_HOOK().
 */
function bt_core_preprocess_node(&$variables) {
  if ($variables['node']->type == 'blog') {
    module_load_include('inc', 'bt_core', '/includes/bt_blog');
    bt_blog_preprocess_blog_type($variables);
  }

  if ($variables['node']->type == 'module') {
    module_load_include('inc', 'bt_core', '/includes/bt_module');
    bt_module_preprocess_module_type($variables);
  }

  if ($variables['node']->type == 'tutorial') {
    module_load_include('inc', 'bt_core', '/includes/bt_tutorial');
    bt_tutorial_preprocess_tutorial_type($variables);
  }
}

/**
 *  Implements hook_node_insert().
 *
 *  Set a node count so that we can check this instead of a SQL query.
 */
function bt_core_node_insert($node) {
  bt_core_set_node_count($node);
}

/**
 *  Implements hook_node_update().
 *
 *  Set a node count so that we can check this instead of a SQL query.
 */
function bt_core_node_update($node) {
  bt_core_set_node_count($node);
}

/**
 *  Implements hook_node_delete().
 *
 *  Set a node count so that we can check this instead of a SQL query.
 */
function bt_core_node_delete($node) {
  bt_core_set_node_count($node);
}

/**
 * Sets a variable for a module types node count.
 *
 * @param $node
 */
function bt_core_set_node_count($node) {
  $count = db_query("SELECT COUNT(nid) AS count FROM {node} WHERE type = :type AND status = 1", array(':type' => $node->type))->fetchField();
  variable_set($node->type . '_total_count', $count);
}

/**
 * Gets all categories for a vocab
 *
 * @return string
 * @throws Exception
 */
function bt_core_categories() {
  // Get a listing of all terms in Tag vocabulary.
  $vocab = taxonomy_vocabulary_machine_name_load('tags');
  $sql  = "SELECT t.tid, COUNT(t.tid) AS used FROM {taxonomy_term_data} t ";
  $sql .= "LEFT JOIN {taxonomy_index} ti ON t.tid = ti.tid ";
  $sql .= "WHERE t.vid = :vid ";
  $sql .= "GROUP BY t.tid ";
//  $sql .= "HAVING COUNT(t.tid) > 1";
  $result = db_query_range($sql, 0, 25, array(':vid' => $vocab->vid));
  $terms = array();
  foreach ($result as $row) {
    $term = taxonomy_term_load($row->tid);
    $term->used = $row->used;
    $terms[] = $term;
  }
  $output = theme('bt_core_categories', array('terms' => $terms));
  return $output;
}

/**
 *  Implements hook_theme().
 */
function bt_core_theme($existing, $type, $theme, $path) {
  $items = array();

  $items['bt_core_categories'] = array(
    'variables' => array('terms' => NULL),
    'template' => 'categories',
    'path' => drupal_get_path('module', 'bt_core') . '/templates',
  );

  $items['bt_blog_list'] = array(
    'variables' => array('blogs' => NULL),
    'template' => 'blog-list',
    'path' => drupal_get_path('module', 'bt_core') . '/templates/blog',
  );

  $items['bt_module_list'] = array(
    'variables' => array('modules' => NULL),
    'template' => 'module-list',
    'path' => drupal_get_path('module', 'bt_core') . '/templates/module',
  );

  $items['bt_tutorial_list'] = array(
    'variables' => array('tutorials' => NULL),
    'template' => 'tutorial-list',
    'path' => drupal_get_path('module', 'bt_core') . '/templates/tutorial',
  );

  $items['bt_homepage_carousel'] = array(
    'variables' => array('items' => NULL),
    'template' => 'homepage-carousel',
    'path' => drupal_get_path('module', 'bt_core') . '/templates/homepage',
  );

  $items['bt_resume_page'] = array(
    'template' => 'resume',
    'path' => drupal_get_path('module', 'bt_core') . '/templates/resume',
  );

  /** Node TPLs */
  $items['node__blog'] = array(
    'render element' => 'elements',
    'path' => drupal_get_path('module', 'bt_core') . '/templates/blog',
    'template' => 'node--blog',
    'preprocess functions' => array(
      'template_preprocess',
      'template_preprocess_node',
    ),
  );

  $items['node__module'] = array(
    'render element' => 'elements',
    'path' => drupal_get_path('module', 'bt_core') . '/templates/module',
    'template' => 'node--module',
    'preprocess functions' => array(
      'template_preprocess',
      'template_preprocess_node',
    ),
  );

  $items['node__tutorial'] = array(
    'render element' => 'elements',
    'path' => drupal_get_path('module', 'bt_core') . '/templates/tutorial',
    'template' => 'node--tutorial',
    'preprocess functions' => array(
      'template_preprocess',
      'template_preprocess_node',
    ),
  );

  return $items;
}

/**
 * @param $vars
 */
function bt_core_preprocess_views_view_table(&$vars) {
  if (isset($vars['view']->name) && $vars['view']->name == 'recent_posts') {
    $vars['classes_array'][] = 'table table-striped';
  }
}

/**
 * Implements hook_mail().
 */
function bt_core_mail($key, &$message, $params) {
  switch ($key) {
    case 'bt_contact_page':
      $message['subject'] = t(token_replace($params['subject'], $params));
      $message['body'][] = t(token_replace($params['message'], $params));
      break;
  }
}

/**
 * Implements hook_form_alter().
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function bt_core_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'search_api_page_search_form') {
    $form['form']['keys_1']['#title_display'] = 'invisible';
    $form['form']['keys_1']['#prefix'] = '<div class="input-group">';
    $form['form']['keys_1']['#suffix'] = '<span class="input-group-btn"><button class="btn btn-default" type="submit"><i class="glyphicon glyphicon-search"></i></button></span></div>';
    $form['#attributes']['class'][] = 'search-page-form';
    $form['form']['submit_1']['#attributes']['class'][] = 'element-invisible';
  }
}
