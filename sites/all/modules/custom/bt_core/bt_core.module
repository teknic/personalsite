<?php

/**
 * Hold all the core related customizations.
 */

/**
 *  Implements hook_menu().
 */
function bt_core_menu() {
  $items = array();

  $items['blog'] = array(
    'title' => 'Blog',
    'description' => 'List of blogs',
    'page callback' => 'bt_blog_list',
    'access arguments' => array('access content'),
    'file' => 'includes/bt_blog.inc',
    'type' => MENU_CALLBACK,
  );

  $items['open-source'] = array(
    'title' => 'Modules',
    'description' => 'List of modules',
    'page callback' => 'bt_module_list',
    'file' => 'includes/bt_module.inc',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['tutorials'] = array(
    'title' => 'Tutorials',
    'description' => 'List of tutorials',
    'page callback' => 'bt_tutorial_list',
    'file' => 'includes/bt_tutorial.inc',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['resume'] = array(
    'title' => 'Resume',
    'description' => 'Resume Page',
    'page callback' => 'bt_resume_page',
    'file' => 'includes/bt_resume.inc',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['contact'] = array(
    'title' => 'Contact',
    'description' => 'Contact Page',
    'page callback' => 'bt_contact_page',
    'file' => 'includes/bt_contact.inc',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 *  Implements hook_preprocess_HOOK().
 */
function bt_core_preprocess_page(&$variables) {
  $search  = drupal_get_form('search_block_form');
  $search['#attributes']['class'][] = 'col-sm-3';
  $search['#attributes']['class'][] = 'pull-right';
  $variables['search'] = drupal_render($search);

  $categories = bt_core_categories();
  $variables['categories'] = $categories;

  $view = views_get_view('recent_posts');
  $view->set_display('block');
  $view->pre_execute();
  $view->execute();
  $variables['recent_posts'] = $view->render('block');

  if (arg(0) == 'about' || (arg(0) == 'node' && arg(1) == 1)) {
    $variables['page_icon'] = '<i class="fa fa-barcode fa-8x"></i>';
    $variables['page_description'] = t("You have some splaining to do.");
  }

  if (arg(0) == 'blog') {
    $variables['page_icon'] = '<i class="fa fa-database fa-8x"></i>';
    $variables['page_description'] = t('Helpful blogs about development and sometimes random rants');
  }

  if (arg(0) == 'open-source') {
    $variables['page_icon'] = '<i class="fa fa-tasks fa-8x"></i>';
    $variables['page_description'] = t('Open source modules for everyone!');
  }

  if (arg(0) == 'tutorials') {
    $variables['page_icon'] = '<i class="fa fa-file-code-o fa-8x"></i>';
    $variables['page_description'] = t("Some examples, how to's and step-by-step's");
  }

  if (arg(0) == 'contact') {
    $variables['page_icon'] = '<i class="fa fa-envelope fa-8x"></i>';
    $variables['page_description'] = t("Got a question? Feel free to contact me.");
  }
}

/**
 * Gets all categories for a vocab
 *
 * @return string
 * @throws Exception
 */
function bt_core_categories() {
  // Get a listing of all terms in Tag vocabulary.
  $vocab = taxonomy_vocabulary_machine_name_load('tags');
  $sql  = "SELECT t.tid, COUNT(t.tid) AS used FROM {taxonomy_term_data} t ";
  $sql .= "LEFT JOIN {taxonomy_index} ti ON t.tid = ti.tid ";
  $sql .= "WHERE t.vid = :vid ";
  $sql .= "GROUP BY t.tid";
  $result = db_query($sql, array(':vid' => $vocab->vid));
  $terms = array();
  foreach ($result as $row) {
    $term = taxonomy_term_load($row->tid);
    $term->used = $row->used;
    $terms[] = $term;
  }
  $output = theme('bt_core_categories', array('terms' => $terms));
  return $output;
}

/**
 *  Implements hook_theme().
 */
function bt_core_theme($existing, $type, $theme, $path) {
  $items = array();

  $items['bt_core_categories'] = array(
    'variables' => array('terms' => NULL),
    'template' => 'categories',
    'path' => drupal_get_path('module', 'bt_core') . '/templates',
  );

  $items['bt_blog_list'] = array(
    'variables' => array('blogs' => NULL),
    'template' => 'blog-list',
    'path' => drupal_get_path('module', 'bt_core') . '/templates/blog',
  );

  $items['bt_module_list'] = array(
    'variables' => array('modules' => NULL),
    'template' => 'module-list',
    'path' => drupal_get_path('module', 'bt_core') . '/templates/module',
  );

  $items['bt_tutorial_list'] = array(
    'variables' => array('tutorials' => NULL),
    'template' => 'tutorial-list',
    'path' => drupal_get_path('module', 'bt_core') . '/templates/tutorial',
  );

  $items['bt_resume_page'] = array(
    'template' => 'resume',
    'path' => drupal_get_path('module', 'bt_core') . '/templates/resume',
  );

  /** Node TPLs */
  $items['node__blog'] = array(
    'render element' => 'elements',
    'path' => drupal_get_path('module', 'bt_core') . '/templates/blog',
    'template' => 'node--blog',
    'preprocess functions' => array(
      'template_preprocess',
      'template_preprocess_node',
    ),
  );

  $items['node__module'] = array(
    'render element' => 'elements',
    'path' => drupal_get_path('module', 'bt_core') . '/templates/module',
    'template' => 'node--module',
    'preprocess functions' => array(
      'template_preprocess',
      'template_preprocess_node',
    ),
  );

  $items['node__tutorial'] = array(
    'render element' => 'elements',
    'path' => drupal_get_path('module', 'bt_core') . '/templates/tutorial',
    'template' => 'node--tutorial',
    'preprocess functions' => array(
      'template_preprocess',
      'template_preprocess_node',
    ),
  );

  return $items;
}

/**
 * @param $vars
 */
function bt_core_preprocess_views_view_table(&$vars) {
  if (isset($vars['view']->name) && $vars['view']->name == 'recent_posts') {
    $vars['classes_array'][] = 'table table-striped';
  }
}

/**
 * Implements hook_mail().
 */
function bt_core_mail($key, &$message, $params) {
  switch ($key) {
    case 'bt_contact_page':
      $message['subject'] = t(token_replace($params['subject'], $params));
      $message['body'][] = t(token_replace($params['message'], $params));
      break;
  }
}

